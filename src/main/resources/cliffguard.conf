<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


	<bean id="default" class="edu.umich.robustopt.algorithms.NonConvexDesigner">
		<constructor-arg name="version" value="5"/>  <!-- version 4 is also recommended. However, version 6 is not recommended for beginner users -->
		<constructor-arg name="verbosity">
			<bean class="edu.umich.robustopt.common.BLog.LogLevel" factory-method="valueOf">
				<constructor-arg value="VERBOSE"/> <!-- Other legal values:  DEBUG, VERBOSE, WARNING, STATUS, BUG -->
			</bean>
		</constructor-arg>
		<constructor-arg name="dbDesigner"><null/></constructor-arg> 
		<constructor-arg name="dbDeployer"><null/></constructor-arg>
		<constructor-arg name="designMode" ref="vertica-params"/>  <!-- You need to specify "microsoft-params" if using CliffGuard with SQL Server and specify "vertica-params" if using CliffGuard with Vertica -->
		<constructor-arg name="experimentCache"><null/></constructor-arg>
		<constructor-arg name="workloadGenerator" ref="euclidean-union"/> <!-- acceptable values are "euclidean-union", "euclidean-separate" and "euclidean-latency" -->
		<constructor-arg name="howManyPurturbation" value="20"/>
		<constructor-arg name="iterationsToConverge" value="5"/>
		<constructor-arg name="initialWeight" value="0.03"/>
		<constructor-arg name="successFactor" value="0.5"/>
		<constructor-arg name="failureFactor" value="3.2"/>
		<constructor-arg name="deterministic" value="true"/>
		<constructor-arg name="maxFactionOfWorstSolutions" value="0.3"/>
		<constructor-arg name="avgDistanceFactorToFormAGap" value="100"/>
		<constructor-arg name="noticeableRelativeDifference" value="0.01"/>
		<constructor-arg name="latencyMeter"><null/></constructor-arg>
		<constructor-arg name="useExplainInsteadOfRunningQueries" value="false"/>
		<constructor-arg name="maximumQueriesPerWindow" value="200"/> <!-- be careful: if the original window size is larger than 200 you need to increase this -->
		<constructor-arg name="distGenerator">
			<bean class="edu.umich.robustopt.workloads.DistributionDistancePair.Generator"/>
		</constructor-arg>
	</bean>

<!-- the following are the constructor parameters of NonConvexDesigner:

int version, LogLevel verbosity, DBDesigner dbDesigner,
			DBDeployer dbDeployer, DesignParameters designMode,
			ExperimentCache experimentCache,
			WorkloadGenerator workloadGenerator, int howManyPurturbation, int iterationsToConverge, double initialWeight, 
			double successFactor, double failureFactor, boolean deterministic, 
			double maxFactionOfWorstSolutions, double avgDistanceFactorToFormAGap, double noticeableRelativeDifference,
			LatencyMeter latencyMeter, boolean useExplainInsteadOfRunningQueries, int maximumQueriesPerWindow, 
			DistributionDistanceGenerator distGenerator
-->

	<bean name="vertica-params" class="edu.umich.robustopt.vertica.VerticaDesignParameters">  
		<constructor-arg name="designMode">
			<bean class="edu.umich.robustopt.vertica.VerticaDesignMode" factory-method="valueOf">
				<constructor-arg value="BALANCED"/>  <!-- allowed values: BALANCED, LOAD, QUERY -->
			</bean>
		</constructor-arg>
	</bean>

	<bean name="microsoft-params" class="edu.umich.robustopt.microsoft.MicrosoftDesignParameters">  
		<constructor-arg name="designAddMode">
			<bean class="edu.umich.robustopt.microsoft.MicrosoftDesignAddMode" factory-method="valueOf">
				<constructor-arg value="IDX_IV"/>  <!-- IDX_IV: Clustered and nonclustered indexes and indexed views, IDX: Clustered and nonclustered indexes, IV: Indexed views, NCL_IDX: Nonclustered indexes -->
			</bean>
		</constructor-arg>
		<constructor-arg name="designKeepMode">
			<bean class="edu.umich.robustopt.microsoft.MicrosoftDesignKeepMode" factory-method="valueOf">
				<constructor-arg value="NONE"/>  <!--	ALL: Kepp all existing physical design structures, NONE: Do not keep any existing physical design structures, CL_IDX: Keep clustered indexed, IDX: Keep clustered and nonclucstered indexes, ALIGNED: Kepp aligned partitioning -->
			</bean>
		</constructor-arg>
		<constructor-arg name="onlineOption">
			<bean class="edu.umich.robustopt.microsoft.MicrosoftDesignOnlineOption" factory-method="valueOf">
				<constructor-arg value="OFF"/>  <!--  Possible values: ON, OFF, MIXED -->
			</bean>
		</constructor-arg>
	</bean>

	<bean id="euclidean-union" class="edu.umich.robustopt.workloads.EuclideanDistanceWorkloadGeneratorFromLogFileWithSimpleUnionJingkui">
		<constructor-arg name="dbName" value="tpch"/>
		<constructor-arg name="DBVendor" value="vertica"/>
		<constructor-arg name="exampleSqlQueries" ref="load-queries"/> <!-- exampleSqlQueries is used to generate perturbed workloads so it needs to contain some queries not present in the target query file -->
		<constructor-arg name="whichClauses" ref="which-clauses" />
		<constructor-arg name="numOfNewQueries" value="5"/>
	</bean>
<!--
EuclideanDistanceWorkloadGeneratorFromLogFileWithSimpleUnionJingkui(
			String dbAlias, String DBVendor, List<String> exampleSqlQueries, Set<UnionOption> whichClauses, int numOfNewQueries) 
-->

	<bean id="euclidean-separate" class="edu.umich.robustopt.workloads.EuclideanDistanceWorkloadGeneratorFromLogFileWithSeparateClausesRuizhi">
		<constructor-arg name="dbName" value="tpch"/>
		<constructor-arg name="DBVendor" value="vertica"/>
		<constructor-arg name="exampleSqlQueries" ref="load-queries"/><!-- exampleSqlQueries is used to generate perturbed workloads so it needs to contain some queries not present in the target query file -->
		<constructor-arg name="numOfNewQueries" value="5"/>
	</bean>

<!--
EuclideanDistanceWorkloadGeneratorFromLogFileWithSeparateClausesRuizhi(
			String dbName, String DBVendor, List<String> exampleSqlQueries, int numOfNewQueries) throws Exception
-->

	<bean id="euclidean-latency" class="edu.umich.robustopt.workloads.EuclideanDistanceWithLatencyWorkloadGeneratorFromLogFile">
		<constructor-arg name="dbName" value="tpch"/>
		<constructor-arg name="DBVendor" value="vertica"/>
		<constructor-arg name="exampleSqlQueries" ref="load-queries"/><!-- exampleSqlQueries is used to generate perturbed workloads so it needs to contain some queries not present in the target query file -->
		<constructor-arg name="whichClauses" ref="which-clauses" />
		<constructor-arg name="numOfNewQueries" value="5"/>
		<constructor-arg name="latencyMeter"><null/></constructor-arg>
		<constructor-arg name="latencyPenaltyFactor" value="0.2"/>
		<constructor-arg name="useExplainInsteadOfRunningQueries" value="true"/>
	</bean>


<!--
EuclideanDistanceWithLatencyWorkloadGeneratorFromLogFile(String dbName, String DBVendor, List<String> exampleSqlQueries,
			Set<UnionOption> whichClauses, int numOfNewQueries, LatencyMeter latencyMeter, Double latencyPenaltyFactor, boolean useExplainInsteadOfRunningQueries) throws
-->

	<bean id="load-queries" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="edu.umich.robustopt.clustering.SqlLogFileManager"/>
		<property name="targetMethod" value="loadQueryStringsFromPlainFile"/>
		<property name="arguments">
		<list>
			<value>/home/dbadmin/robust-opt/VLogProcessor/data/sample_plain_query_file.txt</value><!-- This is the local path to the exampleSqlQueries file-->
			<value>-1</value> <!-- This is the number of queries to load from exampleSqlQueries file. Use -1 to load all queries -->
		</list>
		</property>
	</bean>

	<bean id="which-clauses" class="java.util.HashSet">
		<constructor-arg>
			<set>
				<bean class="edu.umich.robustopt.workloads.EuclideanDistanceWithSimpleUnion.UnionOption" factory-method="valueOf">
					<constructor-arg value="SELECT"/>
				</bean>
				<bean class="edu.umich.robustopt.workloads.EuclideanDistanceWithSimpleUnion.UnionOption" factory-method="valueOf">
					<constructor-arg value="WHERE"/>
				</bean>
				<bean class="edu.umich.robustopt.workloads.EuclideanDistanceWithSimpleUnion.UnionOption" factory-method="valueOf">
					<constructor-arg value="GROUP_BY"/>
				</bean>
				<bean class="edu.umich.robustopt.workloads.EuclideanDistanceWithSimpleUnion.UnionOption" factory-method="valueOf">
					<constructor-arg value="ORDER_BY"/>
				</bean>
			</set>
		</constructor-arg>
	</bean> 



</beans>


